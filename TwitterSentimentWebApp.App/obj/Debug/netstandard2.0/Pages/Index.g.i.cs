#pragma checksum "C:\Users\Steven\Source\TwitterSentimentWebApp\TwitterSentimentWebApp.App\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eaba3a46e7fcaa807f020706957ddaa1b601af91"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TwitterSentimentWebApp.App.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using TwitterSentimentWebApp.App;
    using TwitterSentimentWebApp.App.Shared;
    using System.Text.RegularExpressions;
    using TwitterSentiment;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 59 "C:\Users\Steven\Source\TwitterSentimentWebApp\TwitterSentimentWebApp.App\Pages\Index.cshtml"
            
    IEnumerable<TweetsWithSentiment> TweetSentiment;
    bool TweetsLoaded => TweetSentiment != null;
    bool HideLoader = true;
    string username;
    double Average;

    string Error = "";
    bool HideError => String.IsNullOrWhiteSpace(Error); 
    string InputCssClass => HideError ? "" : "is-invalid"; 

    private async Task Search()
    {
        var isValid = IsUsernameValid(username);

        if(isValid)
        {
            await ToggleLoader();

            if(username != "demo")
                await DoSearch();
            else
                await DoDemoSearch();

            await ToggleLoader();
        }
        else
        {
           Error = "A username cannot be longer than 15 characters and contain only alphanumeric characters (letters A-Z, numbers 0-9) or underscores";
           await RefreshState();
        }
        
    }

    private async Task DoSearch()
    {
        var tweets = await twitterClient.GetTimeline(username);
        var sentiment = await analyticsClient.AnalyzeSentiment(tweets.ProjectToDocuments());

        TweetSentiment = tweets.Combine(sentiment);

        Average = TweetSentiment.Select(s=> s.Score).Average();
    }

    private async Task DoDemoSearch()
    {
       await Task.Delay(3000);

       TweetSentiment = new List<TweetsWithSentiment> {
            new TweetsWithSentiment("1", "Wholeschool is awesome!", 0.9),
            new TweetsWithSentiment("1", "Wholeschool staff are the best", 0.7),
            new TweetsWithSentiment("1", "Moodle is a great product", 0.6),
            new TweetsWithSentiment("1", "Wholeschool are a software company", 0.5),
            new TweetsWithSentiment("1", "NodeJs is pants!", 0.1),
        };

        Average = TweetSentiment.Select(s=> s.Score).Average();
    }

    private async Task ToggleLoader()
    {
       HideLoader = !HideLoader;
       base.StateHasChanged();
    }
    
    private async Task RefreshState()
    {
        base.StateHasChanged();
    }

    private bool IsUsernameValid(string username)
    {
        Error = "";

        if(string.IsNullOrWhiteSpace(username))
            return false;

        return new Regex(@"^@?(\w){1,15}$")
                .Match(username)
                .Success;
    }

    private string GetSentimentText(double score, bool isCssClass = false)
    {
        switch (score)
        {
            case var s when (s >= 0.8): return isCssClass ? "success" : "Very Positive";
            case var s when (s > 0.5): return isCssClass ? "success" : "Positive";
            case var s when (s == 0.5): return isCssClass ? "default" : "Neutral";
            case var s when (s <= 0.2): return isCssClass ? "danger" : "Very Negative";
            case var s when (s < 0.5): return isCssClass ? "danger" : "Negative";
            default: return isCssClass ? "success" : "default";
        }
    }

    async Task KeyPress(UIKeyboardEventArgs e)
    {
        Console.WriteLine("KEY:" + e.Key);
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private TextAnalyticsClient analyticsClient { get; set; }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private TwitterClient twitterClient { get; set; }
    }
}
#pragma warning restore 1591
